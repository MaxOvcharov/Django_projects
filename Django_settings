1) Установка и настройка postgres - https://habrahabr.ru/post/168601/
wget http://ftp.postgresql.org/pub/source/v9.2.2/postgresql-9.2.2.tar.gz
tar xzf postgresql-9.2.2.tar.gz /opt/postgresql-9.2.2

# По умолчанию файлы базы будут установлены в директорию /usr/local/pgsql
# Перед сборкой можно указать компилятор С++
export CC=gcc

# Сборка postgesql от root
cd postgresql-9.2.2
./configure --without-readline
sudo make install clean

# создадим специального пользователя
sudo useradd postgres -p postgres -U -m

# Даем права на директорию
sudo chown -R postgres:postgres /usr/local/pgsql

# Инициализируем кластер баз дынных
/usr/lib/postgresql/9.5/bin/initdb -D /usr/local/pgsql/data
                     или
initdb -D /usr/local/pgsql/data

# Добавить запуск PostgreSQL в автостарт
sudo cp ./postgresql-9.2.2/contrib/start-scripts/linux /etc/init.d/postgres
sudo update-rc.d postgres defaults - Debian
sudo chkconfig --add /etc/init.d/postgres
##################################################################################################################
2) Создаем базу данных и пользователя
https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-django-application-on-ubuntu-14-04

sudo su - postgres
psql
CREATE DATABASE myproject;
CREATE USER myprojectuser WITH PASSWORD 'password';

# We are setting the default encoding to UTF-8, which Django expects. We are also setting the default transaction
# isolation scheme to "read committed", which blocks reads from uncommitted transactions. Lastly, we are setting
# the timezone. By default, our Django projects will be set to use UTC:

ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE myprojectuser SET timezone TO 'UTC';

# Now, all we need to do is give our database user access rights to the database we created:
GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;

# Configure the Django Database Settings


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}

##################################################################################################################

# Проверка версии Django
python -c "import django; print(django.get_version())"

# Создание проекта
django-admin startproject <Имя проекта>

cd ~/myproject - имя проекта Django
python manage.py makemigrations
python manage.py migrate

# Создание пользователя с админскими правами
python manage.py createsuperuser
<<<<<<< HEAD

# Проверка структуры sql для созданой модели в БД
python manage.py sqlmigrate <app name> 0001_initial
=======
<Ввести пароль>

# Запуск сервера
python manage.py runserver

# Создание приложения
python manage.py startapp polls

# Команда sqlmigrate не применяет миграцию к базе данных - она просто выводит запросы на экран,
# чтобы вы могли увидеть какой SQL создает Django.
python manage.py sqlmigrate sqlmigrate <Имя приложения> <Номер, например 0001>

# Команда ищет проблемы в вашем проекте не применяя миграции и не изменяя базу данных.
python manage.py check

# Если вы не знаете где лежат исходники Django, выполните следующую команду:
python -c "
import sys
sys.path = sys.path[1:]
import django
print(django.__path__)"
